#!/bin/bash
#
# Author: Martin Matusiak <numerodix@gmail.com>
# Licensed under the GNU Public License, version 3.


# load constants and functions
p=$(dirname $(readlink -f $0)); . $p/lib.sh

usage="Usage:  ${b}${tool_name} -t ${bb}01,02,03${b} -a ${bb}en${b} -s ${bb}es${b} ${r}[${b}-d ${bb}/dev/dvd${r}] [${b}more options${r}]\n
  -t --title    titles to rip (comma separated)
  -a --audio    audio language (two letter code, eg. ${bb}en${r}, or integer id)
  -s --subs     subtitle language (two letter code or ${bb}off${r}, or integer id)\n
  -d --dev      dvd device to rip from (default is ${bb}/dev/dvd${r})
  -q --dir      dvd directory to rip from
  -i --iso      dvd iso image to rip from\n
     --start    start after this many seconds (usually for testing)
  -e --end      end after this many seconds (usually for testing)\n
  -C            do sanity check (check for missing tools)
  -z --adv      <show advanced options>
     --version  show ${suite_name} version"

adv_usage="Advanced usage:  ${b}${tool_name} ${r}[${b}standard options${r}] [${b}advanced options${r}]
  -o --size     output file size in mb (integer value)
     --bpp      bits per pixel (float value)
  -1            force 1-pass encoding
  -2            force 2-pass encoding
  -u --enc      dvd is encrypted, clone with vobcopy (needs libdvdcss)
  -n --noclone  no disc cloning (encode straight from the dvd)
  -c --crop     autocrop video
  -r --scale    scale video to x:y (integer value or ${bb}0${r}) or ${bb}off${r} to disable
  -f --smooth   use picture smoothing filter
  -D --dryrun   dry run (display encoding parameters without encoding)\n
     --cont     set container format
     --acodec   set audio codec
     --vcodec   set video codec"

shorts="t:a:s:d:q:i:e:o:r:12uncfDCz"
longs="title:,audio:,subs:,dev:,dir:,iso:,start:,end:,adv,version,size:,bpp:,enc,noclone,crop,scale:,smooth,dryrun,cont:,acodec:,vcodec:"
eval $(get_parsecmd "$tool_name" "$shorts" "$longs")

while true; do
    case "$1" in
        -t|--title   ) titles=$(echo $2 | $sed 's|,| |g'); shift 2;;
        -a|--audio   ) alang=$2; shift 2;;
        -s|--subs    ) slang=$2; shift 2;;

        -d|--dev     ) dvd_device="$2"; shift 2;;
        -q|--dir     ) dvdisdir="y";mencoder_source="$2"; shift 2;;
        -i|--iso     ) dvdisiso="y";skipclone="y";mencoder_source="$2"; shift 2;;

           --start   ) opts_start=$2; shift 2;;
        -e|--end     ) opts_end=$2; shift 2;;
           --version ) print_version;;

        -o|--size    ) target_size="$2"; shift 2;;
           --bpp     ) bpp="$2"; shift 2;;
        -1           ) target_passes="1"; shift;;
        -2           ) target_twopass=y;target_passes="2"; shift;;
        -u|--enc     ) encrypted="y"; shift;;
        -n|--noclone ) skipclone="y";opt_noclone="y"; shift;;
        -c|--crop    ) autocrop=y; shift;;
        -r|--scale   ) custom_scale="$2"; shift 2;;
        -f|--smooth  ) prescale="spp,";postscale=",hqdn3d"; shift;;
        -D|--dryrun  ) dry_run="y"; shift;;

           --cont    ) opts_cont="$2"; shift 2;;
           --acodec  ) opts_acodec="$2"; shift 2;;
           --vcodec  ) opts_vcodec="$2"; shift 2;;

        -C           ) init_cmds "y"; exit;;
        -z|--adv     ) echo -e "$adv_usage"; exit;;
        --           ) shift ; break ;;
    esac
done

display_tool_banner


if [[ ! -e "$dvd_device" ]]; then
    echo -e "${wa}=>${r} The dvd device ${bb}$dvd_device${r} does not exist."
    echo -e "${wa}=>${r} Supply the right dvd device to ${tool_name}, eg:"
    echo -e "    ${b}${tool_name} -d ${bb}${dvd_device}${r} [${b}other options${r}]"
    exit 2
fi

if [[ "$opt_noclone" ]]; then
    if [[ ! "$dvdisdir" && ! "$dvdisiso" ]]; then
        mencoder_source="$dvd_device"
    fi
fi

if [[ "$opts_start" ]]; then
    startpos="-ss $opts_start"
else
    opts_start=0
fi

if [[ "$opts_end" ]]; then
    endpos="-endpos $opts_end"
fi


if [[ ! "$titles" ]]; then
    echo -e "${e}No titles to rip, exiting${r}"
    echo -e "$usage"
    exit 2
fi

if [[ ! "$alang" ]]; then
    echo -e "${e}No audio language selected, exiting${r}"
    echo -e "$usage"
    exit 2
else
    audio=$(ternary_int_str "$alang" "-aid" "-alang")
fi

if [[ ! "$slang" ]]; then
    slang="off"
else
    subs=$(ternary_int_str "$slang" "-sid" "-slang")
fi


$mkdir -p logs
if [[ $? != 0 ]] ; then
    echo -e "${e}Could not write to ${bb}$PWD${e}, exiting${r}"
    exit 1
fi


# Set container and codecs

[[ "$opts_cont" ]] && container="$opts_cont"
info=($(container_opts "$container" "$opts_acodec" "$opts_vcodec"))
audio_codec=${info[0]}
video_codec=${info[1]}
ext=${info[2]}
cont=${info[@]:3}

echo -en " - Output format :: "
echo -en "container: ${it}$container${r}"
echo -en "  audio: ${it}$audio_codec${r}"
echo -e  "  video: ${it}$video_codec${r}"

# Quote encoding source

mencoder_source_quot="\"$(escape_chars "$mencoder_source")\""


if [[ ! "$dvdisdir" && ! "$skipclone" ]]; then
    echo -en " * Cloning dvd to disk first... "

    if [[ "$encrypted" ]]; then
        mencoder_source="disc"
        clone_vobcopy "$dvd_device" "$mencoder_source"
    else
        clone_dd "$dvd_device" "$disc_image"
    fi

    if [[ $? != 0 ]] ; then
        echo -e "${e}\nFailed, check log${r}"
        exit 1
    fi
    echo -e "${ok}done${r}"
fi


# Display dry-run status

if [[ "$dry_run" ]]; then
    echo -e " * Performing dry-run on title(s) ${bb}$titles${r}"
    display_title_line "header"
fi

for title in $titles; do
	
    # Display encode status

    if [[ ! "$dry_run" ]]; then
        echo -en " * Now ripping title ${bb}$title${r}, with audio ${bb}$alang${r} and subtitles ${bb}$slang${r}"
        if [[ "$opts_end" ]]; then
            end=$(( $opts_start + $opts_end ))
            echo -e "  ${r}[${bb}${opts_start}${r}s - ${bb}${end}${r}s]"
        else
            echo
        fi
    fi


    # Extract information from the title

    info=($(examine_title "dvd://$title" "$mencoder_source"))
    width=${info[0]}
    height=${info[1]}
    fps=${info[2]}
    length=${info[3]}
    src_abitrate=${info[4]}

    # Do we need to crop?

    if [[ "$autocrop" ]]; then
        echo -en " + Finding out how much to crop...\r"
        info=($(crop_title "dvd://$title" "$mencoder_source"))
        width=${info[0]}
        height=${info[1]}
        crop_filter="crop=${info[2]},"
        if [[ ! "$width" || ! "$height" || ! "$crop_filter" ]]; then
            echo -e "${e}Crop detection failed${r}              "
            exit 1
        fi
    fi

    # Find out how to scale the dimensions

    scale_info=($(title_scale "$width" "$height" "$custom_scale"))
    width=${scale_info[0]}
    height=${scale_info[1]}
    scale="scale=$width:$height"

    # Estimate filesize of audio

    audio_bitrate=$(acodec_opts "$container" "$audio_codec" "$src_abitrate" "y")
    acodec=$(acodec_opts "$container" "$audio_codec" "$src_abitrate" "")
    audio_size=$(compute_media_size "$length" "$audio_bitrate")

    # Decide bpp

    if [[ "$bpp" ]]; then
		$true
    elif [[ "$target_size" ]]; then
        video_size=$(( $target_size - $audio_size ))
        [[ "0" > "$video_size" ]] && video_size=1
        bpp=$(compute_bpp "$width" "$height" "$fps" "$length" "$video_size")
    else
        bpp=$(set_bpp "$video_codec" "$target_twopass")
    fi

    # Reset the number of passes based on the bpp

    unset twopass
    if [[ "$target_passes" ]]; then
        passes="$target_passes"
    else
        passes=$(set_passes "$video_codec" "$bpp")
    fi
    [[ "$passes" = "2" ]] && twopass=y

    # Compute bitrate

    video_bitrate=$(compute_bitrate "$width" "$height" "$fps" "$bpp")

    # Estimate output size
    unset output_size
    if [[ "$target_size" ]]; then
        output_size="$target_size"
    else
        video_size=$(compute_media_size "$length" "$video_bitrate")
        output_size=$(( $video_size+$audio_size ))
    fi



    if [[ "$dry_run" ]]; then

        # Dry run

        filesize="$output_size"
        display_title "$width" "$height" "$fps" "$length" "$bpp" "$passes" "$video_bitrate" "$video_codec" "$audio_bitrate" "$audio_codec" "$filesize" "$filename"

    else

        # Encode video

        pass=0
        for p in $($seq $passes); do
            pass=$(( $pass + 1 ))

            vcodec=$(vcodec_opts "$video_codec" "$twopass" "$pass" "$video_bitrate")

            cmd="time \
            $nice -n20 \
            $mencoder -v \
            dvd://${title} \
            -dvd-device $mencoder_source_quot \
            ${audio} \
            ${subs} \
            ${startpos} \
            ${endpos} \
            -vf ${crop_filter}${prescale}${scale}${postscale} \
            -ovc ${vcodec} \
            -oac ${acodec} \
            -of ${cont}"
            run_encode "$cmd" "$title" "$ext" "$length" "$twopass" "$pass"
        done

        [[ -f "${title}.${ext}.partial" ]] && \
			$mv "${title}.${ext}.partial" "${title}.${ext}"
        $rm divx2pass* 2> /dev/null

        remux_container "$title" "$ext" "$fps" "$container" "$audio_codec" "$video_codec"

    fi

done
